{"version":3,"sources":["task/Task.js","AllTasks/AllTasks.js","AddTask/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Task","_ref","task","editTaskName","toggleTaskCompletedStatus","removeTaskById","_useState","useState","_useState2","Object","slicedToArray","editing","setEditing","_useState3","name","_useState4","editedTaskName","setEditedTaskName","handleEditTaskChange","event","target","value","handleSaveChangeToTask","preventDefault","id","cancelEdit","react_default","a","createElement","className","htmlFor","concat","type","onChange","checked","completed","onSubmit","onClick","AllTasks","tasks","map","key","task_Task","AddTask","addTask","taskToAdd","setTaskToAdd","App","properties","setTasks","lastIdToAdd","setLastIdToAdd","AllTasks_AllTasks","editedTask","tasksDeepClone","cloneDeep","find","taskId","taskIndex","findIndex","splice","AddTask_AddTask","taskName","newTask","push","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.190e2bab.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Task.css';\n\nfunction Task({ task, editTaskName, toggleTaskCompletedStatus, removeTaskById }) {\n    const [editing, setEditing] = useState(false);\n    const [editedTaskName, setEditedTaskName] = useState(task.name);\n\n    const renderEditing = () => (\n        <form onSubmit={handleSaveChangeToTask}>\n            <label htmlFor={`Task-edit-${task.id}`}></label>\n            <input type=\"text\" value={editedTaskName} id={`Task-edit-${task.id}`} onChange={handleEditTaskChange}></input>\n        </form>\n    )\n\n    const handleEditTaskChange = event => setEditedTaskName(event.target.value);\n\n    const renderEditButton = () => (\n        <button className=\"Task-edit\" onClick={() => setEditing(true)}>Edit</button>\n    )\n\n    const renderSaveButton = () => (\n        <button className=\"Task-edit\" onClick={handleSaveChangeToTask}>Save</button>\n    )\n\n    const handleSaveChangeToTask = event => {\n        event.preventDefault();\n\n        editTaskName({ id: task.id, name: editedTaskName });\n        setEditing(false);\n    }\n\n    const renderCancelEditButton = () => (\n        <button className=\"Task-edit\" onClick={cancelEdit}>Cancel</button>\n    )\n\n    const cancelEdit = () => {\n        setEditing(false);\n        setEditedTaskName(task.name);\n    }\n\n    const toggleCompletedStatus = () => toggleTaskCompletedStatus(task.id)\n\n    const renderTaskName = () => (\n        <span className={task.completed ? 'Task-completed' : null}>{task.name}</span>\n    )\n\n    const removeTask = () => removeTaskById(task.id);\n\n    return (\n        <section className=\"Task\">\n            <div className=\"Task-name\">\n                <label htmlFor={`${task.id}-task`}></label>\n                <input type=\"checkbox\" id={`${task.id}-task`} onChange={toggleCompletedStatus} checked={task.completed}></input>\n                {editing ? renderEditing() : renderTaskName()}\n            </div>\n            <div>\n                {editing ? renderSaveButton() : renderEditButton()}\n                {editing ? renderCancelEditButton() : null}\n                <button className=\"Task-delete\" onClick={removeTask}>X</button>\n            </div>\n        </section>\n    )\n}\n\nexport default Task;","import React from 'react';\nimport Task from '../task/Task';\n\nfunction AllTasks({ tasks, editTaskName, toggleTaskCompletedStatus, removeTaskById }) {\n\n    return (\n        <section className=\"Task\">\n            <ol>\n                {tasks.map(task => <li key={task.id}><Task task={task} editTaskName={editTaskName} toggleTaskCompletedStatus={toggleTaskCompletedStatus} removeTaskById={removeTaskById}></Task></li>)}\n            </ol>\n        </section>\n    );\n}\n\nexport default AllTasks;","import React, { useState } from 'react';\n\nfunction AddTask({ addTask }) {\n    const [taskToAdd, setTaskToAdd] = useState('');\n\n    const handleAddTask = event => {\n        event.preventDefault();\n\n        addTask(taskToAdd);\n        setTaskToAdd('');\n    }\n\n    const handleAddTaskChange = event => {\n        setTaskToAdd(event.target.value);\n    }\n\n    return (\n        <section className=\"AddTask\">\n            <form onSubmit={handleAddTask}>\n                <label>\n                    <h1>Add Task</h1>\n                    <input type=\"text\" value={taskToAdd} onChange={handleAddTaskChange} />\n                </label>\n                <button>Add</button>\n            </form>\n        </section>\n    )\n}\n\nexport default AddTask;","import React, { useState } from 'react';\nimport { cloneDeep } from 'lodash';\nimport AllTasks from './AllTasks/AllTasks';\nimport AddTask from './AddTask/AddTask';\n\nfunction App(properties) {\n  const initialTodoState = [\n    {\n      id: 1,\n      name: 'Task name',\n      completed: false\n    },\n    {\n      id: 2,\n      name: 'Grocery shopping',\n      completed: true\n    },\n    {\n      id: 3,\n      name: 'Stream on Twitch',\n      completed: false\n    }\n  ];\n\n  const [tasks, setTasks] = useState(initialTodoState);\n  const [lastIdToAdd, setLastIdToAdd] = useState(3);\n\n  const addTask = taskName => {\n    const newTask = {\n      id: lastIdToAdd + 1,\n      name: taskName,\n      completed: false\n    };\n\n    tasks.push(newTask);\n    setTasks(tasks);\n    setLastIdToAdd(lastIdToAdd + 1);\n  }\n\n  const editTaskName = editedTask => {\n    const tasksDeepClone = cloneDeep(tasks);\n    const task = tasksDeepClone.find(task => task.id === editedTask.id);\n\n    task.name = editedTask.name;\n    setTasks(tasksDeepClone);\n  }\n\n  const toggleTaskCompletedStatus = taskId => {\n    const tasksDeepClone = cloneDeep(tasks);\n    const task = tasksDeepClone.find(task => task.id === taskId);\n\n    task.completed = !task.completed;\n    setTasks(tasksDeepClone);\n\n  }\n\n  const removeTaskById = taskId => {\n    const tasksDeepClone = cloneDeep(tasks);\n    const taskIndex = tasksDeepClone.findIndex(task => task.id === taskId);\n\n    tasksDeepClone.splice(taskIndex, 1);\n    setTasks(tasksDeepClone);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React State Todo App</h1>\n      <AllTasks tasks={tasks} editTaskName={editTaskName} toggleTaskCompletedStatus={toggleTaskCompletedStatus} removeTaskById={removeTaskById} />\n      <AddTask addTask={addTask} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}